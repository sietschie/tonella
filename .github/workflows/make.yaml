# This is the name of the workflow, visible on GitHub UI.
name: make

# Here we tell GitHub to run the workflow when a commit
# is pushed or a Pull Request is opened.
on: [push, pull_request]

# This is the list of jobs that will be run concurrently.
# Since we use a build matrix, the actual number of jobs
# started depends on how many configurations the matrix
# will produce.
jobs:
  clang-format:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - uses: DoozyX/clang-format-lint-action@v0.5
      with:
        source: 'src'
        exclude: './third_party'
        extensions: 'h,cpp,ino'
        clangFormatVersion: 9

  cpp-unittest:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Compile
      run: |
          cd test/tonella/
          mkdir build
          cd build
          cmake ..
          make googletest
          make runTests
          make runTestsCov
    - name: Run
      run: |
          cd test/tonella/build
          ./runTests
    - name: Code Coverage
      run: |
          sudo apt install lcov
          cd test/tonella/build
          ./runTestsCov
          lcov -d CMakeFiles/runTestsCov.dir -c -o ex_test.info
          lcov -r ex_test.info /usr/include/\* $PWD/include/gmock/\* $PWD/include/gtest/\* \*/test/tonella/\* -o ex_test_filtered.info
          genhtml ex_test_filtered.info -o res
    - uses: actions/upload-artifact@v1
      with:
        name: codeCoverageReport
        path: test/tonella/build/res

  cpp-doc:
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Install Doxygen
      run: |
          sudo apt install doxygen
    - name: Run Doxygen
      run: |
          cd doc
          doxygen Doxyfile

  python-format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Python Style Checker
      uses: andymckay/pycodestyle-action@0.1.3

  python-doc:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Python Docstring Checker
      run: |
          pip3 install pydocstyle --user
          ~/.local/bin/pydocstyle src
      

  # This is the name of the job - can be whatever.
  compile:

    # Here we tell GitHub that the jobs must be determined
    # dynamically depending on a matrix configuration.
    strategy:
      matrix:
        # The matrix will produce one job for each configuration
        # parameter of type `arduino-platform`, in this case a
        # total of 2.
        arduino-platform: ["arduino:avr"]
        # This is usually optional but we need to statically define the
        # FQBN of the boards we want to test for each platform. In the
        # future the CLI might automatically detect and download the core
        # needed to compile against a certain FQBN, at that point the
        # following `include` section will be useless.
        include:
          # This works like this: when the platformn is "arduino:samd", the
          # variable `fqbn` is set to "arduino:samd:nano_33_iot".
          #- arduino-platform: "arduino:samd"
          #  fqbn: "arduino:samd:nano_33_iot"
          - arduino-platform: "arduino:avr"
            fqbn: "arduino:avr:uno"

    # This is the platform GitHub will use to run our workflow, we
    # pick Windows for no particular reason.
    runs-on: ubuntu-latest

    # This is the list of steps this job will run.
    steps:
      # First of all, we clone the repo using the `checkout` action.
      - name: Checkout
        uses: actions/checkout@master

      # We use the `arduino/setup-arduino-cli` action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1

      # We then install the platform, which one will be determined
      # dynamically by the build matrix.
      - name: Install platform
        run: |
          arduino-cli core update-index
          arduino-cli core install ${{ matrix.arduino-platform }}
          arduino-cli lib install MFRC522
          arduino-cli lib install DFRobotDFPlayerMini
          arduino-cli lib install "Adafruit NeoPixel"

      # Finally, we compile the sketch, using the FQBN that was set
      # in the build matrix.
      - name: Compile Sketch
        run: arduino-cli compile --fqbn ${{ matrix.fqbn }} src/tonella/tonella.ino

      - name: Copy binaries
        run: |
            mkdir build
            cp /tmp/arduino-sketch-*/tonella.ino.* build/

      - uses: actions/upload-artifact@v1
        with:
          name: build
          path: build
